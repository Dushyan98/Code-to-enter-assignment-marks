# -*- coding: utf-8 -*-
"""Code to enter marks

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_90LKIgvFPGtxz_PNYuulxN5dQXNy1ln
"""

import json
import pandas as pd  # Added to handle Excel export

# Dictionary to store students' data
students = {}

# File name to save student data
FILE_NAME = "student_data.json"
EXCEL_FILE_NAME = "students_marks_subject_wise.xlsx"  # File to save Excel data

def load_data():
    """Load student data from the file."""
    global students
    try:
        with open(FILE_NAME, "r") as file:
            students = json.load(file)
        print("Data loaded successfully.")
    except FileNotFoundError:
        print(f"No data found. Starting with an empty record.")
    except json.JSONDecodeError:
        print("Error in loading data. Starting with an empty record.")
        students = {}

def save_data():
    """Save the current student data to the file."""
    with open(FILE_NAME, "w") as file:
        json.dump(students, file)
    print("Data saved successfully.")

def register_student():
    reg_no = input("Enter registration number: ")
    if reg_no in students:
        print("Student with this registration number already exists.")
    else:
        students[reg_no] = {}
        print(f"Student with registration number {reg_no} registered successfully.")
        save_data()

def add_marks():
    reg_no = input("Enter registration number: ")
    if reg_no not in students:
        print(f"No student found with registration number {reg_no}.")
        return
    subject = input("Enter subject: ")
    marks = float(input(f"Enter marks for {subject}: "))
    students[reg_no][subject] = marks
    print(f"Marks for {subject} added for student {reg_no}.")
    save_data()

def view_marks():
    reg_no = input("Enter registration number: ")
    if reg_no not in students:
        print(f"No student found with registration number {reg_no}.")
        return
    print(f"Marks for student {reg_no}:")
    for subject, marks in students[reg_no].items():
        print(f"{subject}: {marks}")

def view_all_students():
    if not students:
        print("No students registered.")
        return

    # Get a list of all subjects
    all_subjects = set()
    for reg_no, subjects in students.items():
        all_subjects.update(subjects.keys())

    print("All students and their marks:")
    for reg_no, subjects in students.items():
        print(f"Registration Number: {reg_no}")
        for subject in all_subjects:
            # If the student has marks for the subject, print them; otherwise, print 0
            marks = subjects.get(subject, 0)
            print(f"{subject}: {marks}")
        print("")  # Print a newline after each student

def update_marks():
    reg_no = input("Enter registration number: ")
    if reg_no not in students:
        print(f"No student found with registration number {reg_no}.")
        return
    subject = input("Enter subject to update: ")
    if subject in students[reg_no]:
        new_marks = float(input(f"Enter new marks for {subject}: "))
        students[reg_no][subject] = new_marks
        print(f"Marks for {subject} updated for student {reg_no}.")
        save_data()
    else:
        print(f"{subject} not found for student {reg_no}.")


def export_to_excel(students):
    """Export the student marks to an Excel file with subjects as columns."""
    # Convert the data to a DataFrame
    df = pd.DataFrame.from_dict(students, orient="index")

    # Fill NaN (missing values) with 0 (for students without marks in certain subjects)
    df_filled = df.fillna(0)

    # Sorting the DataFrame by the registration number (index)
    df_sorted = df_filled.sort_index()

    # Exporting the sorted DataFrame to an Excel file
    EXCEL_FILE_NAME = "students_marks_subject_wise.xlsx"

    # Ensure the file is not currently open to avoid PermissionError
    try:
        df_sorted.to_excel(EXCEL_FILE_NAME, index_label="Registration Number")
        print(f"Data has been successfully exported to {EXCEL_FILE_NAME}.")
    except PermissionError:
        print(f"PermissionError: Unable to write to {EXCEL_FILE_NAME}. Please close the file if it's open.")


def main():
    load_data()  # Load data at the start
    while True:
        print("\n--- Student Marks Management ---")
        print("1. Register a student")
        print("2. Add marks")
        print("3. View marks for a student")
        print("4. View all students")
        print("5. Update marks")
        print("6. Export data to Excel (subject-wise)")  # New option for subject-wise export
        print("7. Exit")
        choice = input("Enter your choice: ")

        if choice == '1':
            register_student()
        elif choice == '2':
            add_marks()
        elif choice == '3':
            view_marks()
        elif choice == '4':
            view_all_students()
        elif choice == '5':
            update_marks()
        elif choice == '6':
            export_to_excel(students)  # Call the function to export data subject-wise
        elif choice == '7':
            print("Exiting...")
            save_data()  # Save data before exiting
            break
        else:
            print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()